# Copyright 2020 Unibg Seclab (https://seclab.unibg.it)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rdflib

from mosaicrown import utils, vocabularies
from mosaicrown.namespaces import MOSAICROWN, ODRL
from mosaicrown.sql.sqlquery import get_targets_from_query
from mosaicrown.visualization import triples_table


# users
administrative = rdflib.URIRef("http://unibg.it/user/administrative")
professor = rdflib.URIRef("http://unibg.it/user/professor")

# actions
write = MOSAICROWN.write
read = MOSAICROWN.read
sell = MOSAICROWN.sell
sellreport = MOSAICROWN.sellreport

# purposes
statistical = MOSAICROWN.statistical
institutional = MOSAICROWN.institutional


separator = '--------------------------------------------------'
debug_info = False


def policy_loading():
    """Load the running example policy into the graph."""
    # create empty RDF graph
    print("[*] Create the RDF graph")
    graph = rdflib.Graph()

    # parse ODRL vocabolary
    print("\n[*] Load ODRL vocabolary")
    graph.parse(vocabularies.JSON_LD["ODRL"], format="json-ld")

    # parse MOSAICROWN vocabulary
    # only the namespace is downloaded at runtime by RDFLib, NOT the vocabulary
    print("\n[*] Load MOSAICROWN vocabolary")
    graph.parse(location=vocabularies.JSON_LD["MOSAICROWN"], format="json-ld")

    # policy path atoms
    assignees = ["a", "b"]
    purposes = [1, 2]
    actions = ["s1", "s2"]

    # atoms composition
    pnames = [[i, j, k]
              for i in assignees
              for j in purposes
              for k in actions]

    pbasepath = "http://localhost:8000/"
    pext = '.jsonld'

    # parse policy
    print('\n[*] Load running example policy')
    for p in pnames:
        pname = ''.join(map(str, p)) + pext
        ppath = pbasepath + pname
        print(f'\tLoading policy {ppath}')
        graph.parse(ppath, format="json-ld")

    return graph


def preliminary_policy_expansion(graph):
    """Expand the policy graph with the knowledge contained within the policy.

    :graph: The policy graph
    """
    # expanding hierarchy of targets
    for target in utils.get_targets(graph):
        utils.add_iri_hierarchy_to_graph(graph, target,
                                         predicate=ODRL.partOf,
                                         reverse=True)
    # expanding hierarchy of subjects
    for assignee in utils.get_assignee(graph):
        utils.add_iri_hierarchy_to_graph(graph, assignee,
                                         predicate=MOSAICROWN.belongsTo,
                                         reverse=True)


def main():
    """Configure and run the demo example."""
    # loading the policy into RDF graph
    graph = policy_loading()

    # expand the graph with hierarchy concept on targets and assignees
    print("\n[*] Expand the policy graph with the hierarchy concept")
    preliminary_policy_expansion(graph)

    # serializing the graph to ease testing
    if debug_info:
        print('\n[*] Policy graph serialization\n')
        print(triples_table(graph))
        print('\n[*] Printing some namespace entities')
        print('\tAdministrative user:\t', administrative)
        print('\tWrite action:\t\t', write)
        print('\tStatistical purpose:\t', statistical)

    print("\n[*] Execute access requests")
    print('\n' + separator + '\n\tPress any key to continue\n' + separator)
    input()

    # all tables stored in the database
    target_IRIs = {'student':   'http://unibg.it/engineering/student',
                   'professor': 'http://unibg.it/engineering/professor',
                   'exam':      'http://unibg.it/engineering/exam',
                   'course':    'http://unibg.it/engineering/course'}

    # access request generated by SQL query
    query = "SELECT student.id, student.sex FROM student"
    print(f"\n[*] Access request:\n\t{query}")
    # extracting the targets
    targets = get_targets_from_query(query, target_IRIs)
    # checking access
    utils.check_access(graph, targets, professor, read, statistical)

    print('\n', separator)
    query = "SELECT student.id, student.sex, student.income FROM student"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, professor, read, statistical)

    print('\n', separator)
    query = "SELECT exam.date, exam.courseid, exam.grade FROM exam"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, professor, write, statistical)

    print('\n', separator)
    query = "SELECT exam.date, exam.courseid, exam.grade FROM exam"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, professor, read, institutional)

    print('\n', separator)
    query = "SELECT exam.date, exam.courseid, exam.grade FROM exam"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, write, statistical)

    print('\n', separator)
    query = "SELECT exam.date, exam.courseid, exam.grade FROM exam"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, write, institutional)

    print('\n', separator)
    query = "SELECT exam.date, exam.courseid, exam.grade FROM exam"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, read, institutional)

    print('\n', separator)
    query = "SELECT professor.sex, professor.cf FROM professor"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, sell, institutional)

    print('\n', separator)
    query = """SELECT professor.sex, professor.ethnicity, professor.salary
        FROM professor"""
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, sell, institutional)

    print('\n', separator)
    query = """SELECT professor.sex, professor.ethnicity, professor.salary
        FROM professor"""
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, administrative, sellreport,
                       institutional)

    print('\n', separator)
    query = "SELECT professor.cf FROM professor"
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, professor, sellreport, institutional)

    print('\n', separator)
    query = """SELECT professor.cf, professor.ethnicity
        FROM professor JOIN course ON professor.cf=course.profcf"""
    print(f"\n[*] Access request:\n\t{query}")
    targets = get_targets_from_query(query, target_IRIs)
    utils.check_access(graph, targets, professor, sellreport, institutional)


if __name__ == '__main__':
    main()
